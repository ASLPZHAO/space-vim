"  Plugins {

    " dracula {
        if isdirectory(expand("~/.vim/bundle/vim"))
            color dracula
        endif
    " }

    " vim-colorschemes {
        if isdirectory(expand("~/.vim/bundle/vim-colorschemes"))
            color molokai
        endif
    " }

    " rainbow {
    if isdirectory(expand("~/.vim/bundle/rainbow"))
        let g:rainbow_active=1
        let g:rainbow_conf = {
                    \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
                    \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
                    \   'operators': '_,_',
                    \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
                    \   'separately': {
                    \       '*': {},
                    \       'tex': {
                    \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
                    \       },
                    \       'lisp': {
                    \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
                    \       },
                    \       'vim': {
                    \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
                    \       },
                    \       'html': {
                    \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
                    \       },
                    \       'css': 0,
                    \   }
                    \}
    endif
    " }

    " vim-airline {
    if isdirectory(expand("~/.vim/bundle/vim-airline"))
        let t_Co=256
        " let g:airline_theme="luna"
        let g:airline_theme="powerlineish"
        let g:Powerline_symbols="fancy"
        " use powerline font. If not, let g:airline_powerline_fonts=0
        let g:airline_powerline_fonts=1
        let g:airline#extensions#tabline#enabled=1
        let g:airline#extensions#tabline#buffer_nr_show=1
        let g:airline#extensions#whitespce#enabled=0
        let g:airline#extensions#whitespace#symbol='!'
        let g:airline#extensions#whitespace#mixed_indent_algo=2

        if !exists('g:airline_powerline_fonts')
            let g:airline_left_sep='>'
            let g:airline_right_sep='<'
        endif
    endif

    " }

    " vim-startify {
    if isdirectory(expand("~/.vim/bundle/vim-startify"))
        let g:startify_custom_header = [
                    \ '*****************************************************************************',
                    \ '*                                                                           *',
                    \ '*    ███████╗██████╗  █████╗  ██████╗███████╗    ██╗   ██╗██╗███╗   ███╗    *',
                    \ '*     █╔════╝██╔══██╗██╔══██╗██╔════╝██╔════╝    ██║   ██║██║████╗ ████║    *',
                    \ '*    ███████╗██████╔╝███████║██║     █████╗█████╗██║   ██║██║██╔████╔██║    *',
                    \ '*    ╚════██║██╔═══╝ ██╔══██║██║     ██╔══╝╚════╝╚██╗ ██╔╝██║██║╚██╔╝██║    *',
                    \ '*    ███████║██║     ██║  ██║╚██████╗███████╗     ╚████╔╝ ██║██║ ╚═╝ ██║    *',
                    \ '*    ╚══════╝╚═╝     ╚═╝  ╚═╝ ╚═════╝╚══════╝      ╚═══╝  ╚═╝╚═╝     ╚═╝    *',
                    \ '*                                                                           *',
                    \ '*****************************************************************************',
                    \ ]
    endif
    " }

    " vim-trailing-whitespace {
        if isdirectory(expand("~/.vim/bundle/vim-trailing-whitespace"))
            nmap <Leader>tr :FixWhitespace<CR>                  " 去除行尾等多余空格，有红色标识
        endif
    " }

    " vim-easymotion {
    " <Leader><Leader>w : word, 在单词间移动，往前
    " <Leader><Leader>b : back, 在单词间移动，往后
    " <Leader><Leader>s : search, 字符搜索跳转，双向
    " <leader><Leader>f : forward, 向前搜索字符
    " <Leader><Leader>j
    " <Leader><Leader>k
    " }

    " nerdcommenter {
        if isdirectory(expand("~/.vim/bundle/nerdcommenter"))
            let NERDSpaceDelims=1
        endif
    " }

    " delimitMate {
        if isdirectory(expand("~/.vim/bundle/delimitMate"))
            let delimitMate_expand_cr=1
        endif
    " }

    " vim-markdown {
        if isdirectory(expand("~/.vim/bundle/vim-markdown"))
            let g:vim_markdown_math=1
            let g:vim_markdown_frontmatter=1
        endif
    " }

    " indentLine {
        if isdirectory(expand("~/.vim/bundle/indentLine"))
            let g:indentLine_char='┊'
            let g:indentLine_enabled=1
            let g:indentLine_color_term=239
            let g:indentLine_concealcursor='vc' " default 'inc'
        endif
    " }

    " indent_guides {
    if isdirectory(expand("~/.vim/bundle/vim-indent-guides/"))
        let g:indent_guides_start_level = 2
        let g:indent_guides_guide_size = 1
        let g:indent_guides_enable_on_vim_startup = 1
    endif
    " }

    " nerdtree {
        if isdirectory(expand("~/.vim/bundle/nerdtree"))
            let NERDTreeShowHidden=1            " 显示隐藏文件
            let NERDTreeAutoDeleteBuffer=1      " 删除文件时自动删除文件对应buffer
            let NERDTreeIgnore=[
                        \ '\.py[cd]$', '\~$', '\.swo$', '\.swp$',
                        \ '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$',
                        \ ]

            autocmd StdinReadPre * let s:std_in=1
            " autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
            autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
        endif
    " }

    " tagbar {
        if isdirectory(expand("~/.vim/bundle/tagbar"))
            let g:tagbar_autofocus = 1
        endif
    " }

    " ultisnips {
        if isdirectory(expand("~/.vim/bundle/ultisnips"))
            " Set ultisnips triggers
            let g:UltiSnipsSnippetDirectories=['UltiSnips']
            let g:UltiSnipsSnippetsDir = '~/.vim/bundle/vim-snippets/UltiSnips/'
            let g:UltiSnipsListSnippets = '<C-Tab>'
            let g:UltiSnipsJumpForwardTrigger = '<Tab>'
            let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'
            " 解决ultisnips与YCM 的tab键补全冲突
            " ultisnips选中后按enter键进行补全
            let g:UltiSnipsExpandTrigger = "<nop>"
            let g:ulti_expand_or_jump_res = 0
            function ExpandSnippetOrCarriageReturn()
                let snippet = UltiSnips#ExpandSnippetOrJump()
                if g:ulti_expand_or_jump_res > 0
                    return snippet
                else
                    return "\<CR>"
                endif
            endfunction
            inoremap <expr> <CR> pumvisible() ? "<C-R>=ExpandSnippetOrCarriageReturn()<CR>" : "\<CR>"
        endif
    " }

    " vim-ctrlp {
        if isdirectory(expand("~/.vim/bundle/ctrlp.vim"))
            let g:ctrlp_working_path_mode = 'ra'	" search for nearest ancestor like .git, .hg, and the directory of the current file
            let g:ctrlp_match_window_bottom = 0		" show the match window at the top of the screen
            let g:ctrlp_by_filename = 1
            let g:ctrlp_max_height = 10				" maxiumum height of match window
            let g:ctrlp_switch_buffer = 'et'		" jump to a file if it's open already
            let g:ctrlp_use_caching = 1				" enable caching
            let g:ctrlp_clear_cache_on_exit=0  		" speed up by not removing clearing cache evertime
            let g:ctrlp_mruf_max = 250 				" number of recently opened files
            let g:ctrlp_custom_ignore = {
                        \ 'dir':  '\v[\/]\.(git|hg|svn|build)$',
                        \ 'file': '\v\.(exe|so|dll)$',
                        \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
                        \ }
            let g:ctrlp_match_window_bottom = 0		" show the match window at the top of the screen
            let g:ctrlp_by_filename = 1
            let g:ctrlp_max_height = 10				" maxiumum height of match window
            let g:ctrlp_switch_buffer = 'et'		" jump to a file if it's open already
            let g:ctrlp_regexp = 1
            " 如果ag可用，使用ag替换grep进行搜索
            if executable('ag')
                " Use Ag over Grep
                set grepprg=ag\ --nogroup\ --nocolor
                " Use ag in CtrlP for listing files.
                let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
                " Ag is fast enough that CtrlP doesn't need to cache
                let g:ctrlp_use_caching = 0
            else
                let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
            endif
        endif
    " }

    " syntastic {
        if isdirectory(expand("~/.vim/bundle/syntastic"))
            " 每次调用:SyntasticSetLocList ，将错误覆盖 **quickfix**
            let g:syntastic_always_populate_loc_list=1
            " 自动拉起/关闭错误窗口，不需要手动调用:Errors
            let g:syntastic_auto_loc_list=1
            " 打开文件的时候做检查
            let g:syntastic_check_on_open=0
            " 每次保存的时候做检查
            let g:syntastic_check_on_wq=0
            let g:syntastic_enable_highlighting=1
            let g:syntastic_python_checkers=['pyflakes']           " 使用pyflakes 比pylint快, 需要pip安装pyflakes，
            let g:syntastic_javascript_checkers=['jsl', 'jshint']  " npm 安装
            let g:syntastic_html_checkers=['tidy', 'jshint']
            " 修改高亮的背景色
            hi SyntasticErrorSign guifg=red guibg=black
            " syntastic信息加入状态栏
            set statusline+=%{SyntasticStatusLineFlag()}
            " 配置error-sign
            let g:syntastic_error_symbol='✗'
            let g:syntastic_warning_symbol='⚠'
            " let g:syntastic_style_error_symbol='⚡⚡'
            " let g:syntastic_style_warning_symbol='⚡'
            let g:syntastic_aggregate_errors=1
        endif
    " }

    " YouCompleteMe {
        if isdirectory(expand("~/.vim/bundle/YouCompleteMe"))
            let g:ycm_global_ycm_extra_conf = '~/.space-vim/.ycm_extra_conf.py'
            " 不显示开启vim时检查ycm_extra_conf文件的信息
            " let g:ycm_confirm_extra_conf=0
            " 开启基于tag的补全，可以在这之后添加需要的标签路径
            " let g:ycm_collect_identifiers_from_tags_files=1
            "设置error和warning的提示符，如果没有设置，ycm会以syntastic的
            " g:syntastic_warning_symbol 和 g:syntastic_error_symbol 这两个为准
            let g:ycm_error_symbol='✖'
            let g:ycm_warning_symbol='⚠⚠'
            " 不设置该选项YCM会经常crashed
            " python版本应当与编译YCM时的Python版本一致
            " 建议使用Python3和绝对路径避免不必要的问题
            let g:ycm_path_to_python_interpreter='/Users/xlc/anaconda3/bin/python'
            "注释和字符串中的文字也会被收入补全
            let g:ycm_collect_identifiers_from_comments_and_strings=1
            " 输入第2个字符开始补全
            let g:ycm_min_num_of_chars_for_completion=2
            " 禁止缓存匹配项,每次都重新生成匹配项
            let g:ycm_cache_omnifunc=0
            " 开启语义补全
            let g:ycm_seed_identifiers_with_syntax=1
            "在注释输入中也能补全
            let g:ycm_complete_in_comments=1
            "在字符串输入中也能补全
            let g:ycm_complete_in_strings=1
            "注释和字符串中的文字也会被收入补全
            let g:ycm_collect_identifiers_from_comments_and_strings=0
            " 设置在下面几种格式的文件上屏蔽ycm
            let g:ycm_filetype_blacklist={
                        \ 'tagbar' : 1,
                        \ 'nerdtree' : 1,
                        \ 'markdown' : 1,
                        \ 'unite' : 1,
                        \ 'text' : 1,
                        \ 'csv' : 1,
                        \}
            " 修改对C函数的补全快捷键，默认是CTRL + space，修改为ALT + ;
            let g:ycm_key_invoke_completion='<M-;>'
        endif
    " }

" }

" unite.vim {
    let g:unite_source_menu_menus = {}

    " menu prefix key (for all Unite menus)
    nnoremap [menu] <Nop>
    nmap <LocalLeader> [menu]

    let g:unite_source_history_yank_enable = 1
    let g:unite_enable_start_insert = 0
    let g:unite_enable_short_source_mes = 0
    let g:unite_force_overwrite_statusline = 0
    let g:unite_prompt = '>>> '
    let g:unite_marked_icon = '✓'
    let g:unite_candidate_icon = '∘'
    let g:unite_winheight = 15
    let g:unite_update_time = 200
    let g:unite_split_rule = 'botright'
    let g:unite_source_buffer_time_format = '(%d-%m-%Y %H:%M:%S) '
    let g:unite_source_file_mru_time_format = '(%d-%m-%Y %H:%M:%S) '
    let g:unite_source_directory_mru_time_format = '(%d-%m-%Y %H:%M:%S) '

    " unite.vim useful resources:
    " https://github.com/joedicastro/dotfiles/tree/master/vim
    " unite前缀键: LocalLeader=','
    " menus menu
    nnoremap <silent>[menu]m :Unite -silent -winheight=40 menu<CR>

    " [menu]x : menu.edition {
    let g:unite_source_menu_menus.x = {
                \ 'description' : '    text             ⌘ [menu]x',
                \}
    let g:unite_source_menu_menus.x.command_candidates = [
                \['▷     ➞  show hidden chars',
                \'set list!'],
                \['▷ x d ➞  delete-trailing-whitespaces                                  ⌘ <Leader>tr',
                \'FixWhitespace'],
                \['▷ a | ➞  align-repeat-bar                                    ⌘ <Leader>tt',
                \'Tabularize /|'],
                \['▷ cancel highlight of searched result                          ⌘ <Leader>hc',
                \'nohl'],
                \]
    nnoremap <silent>[menu]e :Unite -silent -winheight=20
                \ menu:x<CR>
    " }

    " [menu]f : menu.files {
    let g:unite_source_menu_menus.f = {
                \ 'description' : '    files & fold     ⌘ [menu]f',
                \}
    let g:unite_source_menu_menus.f.command_candidates = [
                \['▷ go to next fold',
                \'normal zj'],
                \['▷ go to previous fold',
                \'normal zk'],
                \['▷ open all folds',
                \'normal zR'],
                \['▷ close all folds',
                \'normal zM'],
                \['▷ open file',
                \'Unite -start-insert file'],
                \['▷ edit new file',
                \'Unite file/new'],
                \['▷ search directory',
                \'Unite directory'],
                \['▷ make new directory',
                \'Unite directory/new'],
                \['▷ change working directory',
                \'Unite -default-action=lcd directory'],
                \['▷ know current working directory',
                \'Unite output:pwd'],
                \['▷ junk files',
                \'Unite junkfile/new junkfile'],
                \]
    nnoremap <silent>[menu]f :Unite -silent -winheight=20
                \ menu:f<CR>
    " }

    " [menu]p : menu.plugins {
    let g:unite_source_menu_menus.p = {
                \ 'description' : '    plugins          ⌘ [menu]s',
                \}
    let g:unite_source_menu_menus.p.command_candidates = [
                \['▷ syntastic check                                   (syntastic)',
                \'SyntasticCheck'],
                \['▷ syntastic info                                    (syntastic)',
                \'SyntasticInfo'],
                \['▷ syntastic reset                                   (syntastic)',
                \'SyntasticReset'],
                \['▷ Errors                                            (syntastic)',
                \'Errors'],
                \['▷ Ycm restart server                            (YouCompleteMe)',
                \'YcmRestartServer'],
                \]
    nnoremap <silent>[menu]s :Unite -silent
                \ menu:p<CR>
    " }

    " [menu]t : menu.toggle {
    let g:unite_source_menu_menus.t = {
                \ 'description' : '    toggle           ⌘ [menu]t',
                \}
    let g:unite_source_menu_menus.t.command_candidates = [
                \['▷ NERDTree                                          (toggle)       ⌘ <F3>',
                \'NERDTreeToggle'],
                \['▷ IndentLine                                        (toggle)       ⌘ <F4>',
                \'IndentLinesToggle'],
                \['▷ tagbar                                            (toggle)       ⌘ <F9>',
                \'TagbarToggle'],
                \['▷ syntastic                                         (toggle)       ⌘',
                \'SyntasticToggleMode'],
                \]
    nnoremap <silent>[menu]t :Unite -silent
                \ menu:t<CR>
    " }

    " [menu]v : menu.vim {
    let g:unite_source_menu_menus.v = {
                \ 'description' : '    vim              ⌘ [menu]v',
                \}
    let g:unite_source_menu_menus.v.command_candidates = [
                \['▷ choose filetype',
                \'Unite -start-insert filetype'],
                \['▷ choose colorscheme',
                \'Unite colorscheme -auto-preview'],
                \['▷ edit .vimrc',
                \'e ~/.vimrc'],
                \['▷ edit .vimrc.plug.conf',
                \'e ~/.vimrc.plug.conf'],
                \['▷ edit .vimrc.plug.list',
                \'e ~/.vimrc.plug.list'],
                \['▷ toggle line numbers                                          ⌘ <Leader>tl',
                \'call ToggleRelativeAbsoluteNumber()'],
                \['▷ unite sources',
                \'Unite source'],
                \['▷ vim help',
                \'Unite -start-insert help'],
                \['▷ vim commands',
                \'Unite -start-insert command'],
                \['▷ vim mappings',
                \'Unite mapping -start-insert'],
                \['▷ vim functions',
                \'Unite -start-insert function'],
                \['▷ vim runtimepath',
                \'Unite -start-insert runtimepath'],
                \['▷ vim command output',
                \'Unite output'],
                \]
    nnoremap <silent>[menu]v :Unite -silent
                \ menu:v<CR>
    " }

" }

" Plugins Key (re)Mapping {

    " Smart commenter
    nmap <Leader>;; <Plug>NERDCommenterToggle
    omap <Leader>;; <Plug>NERDCommenterToggle
    vmap <Leader>;; <Plug>NERDCommenterToggle

    " tabularize
    nmap <Leader>t\| :Tabularize /\|<CR>                  " 格式化表格
    vmap <Leader>t\| :Tabularize /\|<CR>                  " 格式化表格
    nmap <Leader>a\| :Tabularize /\|<CR>
    vmap <Leader>a\| :Tabularize /\|<CR>
    nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
    vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
    nmap <Leader>a: :Tabularize /:<CR>
    vmap <Leader>a: :Tabularize /:<CR>

    " unite.vim
    nnoremap <Leader>? :Unite output:nmap\ \<Leader\><CR>    " 输出快捷键

    " startify
    nnoremap <Leader>bh :Startify<CR>                        " 回到起始页

    nnoremap <Leader>ts :SyntasticToggleMode<CR>             " syntastic开关

    nnoremap <Leader>ft :NERDTreeToggle<CR>

    " Jump to line
    map <Leader>jl <Plug>(easymotion-bd-jk)
    nmap <Leader>jl <Plug>(easymotion-overwin-line)
    " Jump to word
    map  <Leader>jw <Plug>(easymotion-bd-w)
    nmap <Leader>jw <Plug>(easymotion-overwin-w)

    map <F3> :NERDTreeToggle<CR>
    imap <F3> <ESC>:NERDTreeToggle<CR>

    nmap <F9> :TagbarToggle<CR>
    imap <F9> <ESC>:TagbarToggle<CR>

    if exists('IndentLinesToggle')
        map <F4> :IndentLinesToggle<CR>
        imap <F4> <ESC>:IndentLinesToggle<CR>
    endif

" }
