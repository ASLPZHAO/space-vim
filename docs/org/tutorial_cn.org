#+SETUPFILE: theme-readtheorg.setup
#+AUTHOR: Liu-Cheng Xu
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="home.css"/>

* 前言
** 什么是 layer

    layer, 名词有 "层次", 动词有 "分层" 的意思, 其实很简单, layer 这个概念不过是为了井然有序, 便于进一步的处理而已。就像计算机网络有应用层, 传输层等等, 每个 layer 有自己的职能。space-vim 中一个 layer 不过是针对某方面的 vim 配置与插件的集合.

    在 space-vim 中, 像如下的 c-c++, graphviz, html 等等都为一个 /layer/. layer 的上一级目录, 比如 python layer 的上一级目录 +lang, 可称之为 topic. topic 下的内容均可认为是一个 layer.

    #+BEGIN_EXAMPLE
    layers
    ├── +lang
    │   ├── c-c++
    │   ├── graphviz
    │   ├── html
    │   ├── markdown
    │   └── python
    ├── +themes
    │   ├── airline
    │   └── colors
    ├── +tools
    │   ├── fzf
    │   └── ycmd
    ├── +version-control
    │   ├── git
    │   └── github
    ├── +vim
    │   ├── better-defaults
    │   ├── programming
    │   └── text-align
    └── LAYERS.md
    #+END_EXAMPLE

    一个 layer 通常由 3 个部分组成, README 为其简要介绍, config.vim 为针对该 layer 的配置信息, packages.vim 为支持该 layer 所需安装的一些插件.

    #+BEGIN_EXAMPLE
    python
    ├── README.md
    ├── config.vim
    └── packages.vim
    #+END_EXAMPLE

** 为什么使用空格键为前缀建

    space-vim 的前缀键 (Leader key) 设置为空格键，取自 [[https://github.com/syl20bnr/spacemacs][spacemacs]]. 当然了，在 spacemacs 之前就已经有很多人这么设置了, 它不是第一个，但是它的流行影响了很多人对 Leader key 的设置。

    spacemacs 除了外观漂亮，社区驱动等等优点，主打 evil 并用空格键作为其前缀键可能也是其中一个成功的卖点，因为真的可以减轻手指负担，毕竟 "触手可及".

    #+BEGIN_SRC vim
    let g:mapleader="\<Space>"
    #+END_SRC

    从现代键盘设计的角度看，空格键理应受到优待, 毕竟一个人在 “VIP” 区占了好几个位. 即使 HHKB 这样的神器，也有空格键的一席之地.

    file:../img/hhkb.jpg

** 为什么使用 hjkl 作为方向键

    关于 vim 自身的键位设定，刚开始时可能会觉得很奇怪, 为什么要用这几个键作为方向键呢? 这是因为以前的键盘长这样:

    file:../img/ancient_keyboard.png

    file:../img/ADM-3A.png

    看到这个，也就应该能够理解为什么 vim 使用 hjkl 作为方向键，因为物理条件就是这样, 没得选. 参见 [[http://www.catonmat.net/blog/why-vim-uses-hjkl-as-arrow-keys/][why-vim-uses-hjkl-as-arrow-keys]] .

* 如何使用 space-vim
** 准备工作

    又想马儿跑，又要马儿不吃草，那是不太现实的，所以要想要 space-vim 的体验好一些，一些准备工作必不可少.

*** 满足 “要求” 的 vim

     所谓要求，是指有些插件需要 vim 在编译时必须包含某项特性 (feature)，比如 ycmd layer 中使用的 [[https://github.com/Valloric/YouCompleteMe][YouCompleteMe]] 要求 vim 得有 python 支持。使用 NeoVim 就可以直接跳过这一节le, 因为 NeoVim 默认编译时包含全部特性.

     terminal 中输入 ~vim --version~, 可以看到一串信息，下面显示的是我使用 brew 安装的 vim, 带 "+" 说明该 feature 有了， 带 "-" 说明没有，比如下面的 +python3 说明支持 python3. 安装时还是保险一点，什么 lua, python 都装上, 以免后患。

      #+BEGIN_SRC sh
      $ vim --version
      VIM - Vi IMproved 8.0 (2016 Sep 12, compiled Nov 21 2016 17:35:16)
      MacOS X (unix) version
      Included patches: 1-94
      Compiled by Homebrew
      Huge version without GUI.  Features included (+) or not (-):
      +acl             +file_in_path    +mouse_sgr       +tag_old_static
      +arabic          +find_in_path    -mouse_sysmouse  -tag_any_white
      +autocmd         +float           +mouse_urxvt     -tcl
      -balloon_eval    +folding         +mouse_xterm     +termguicolors
      -browse          -footer          +multi_byte      +terminfo
      ++builtin_terms  +fork()          +multi_lang      +termresponse
      +byte_offset     -gettext         -mzscheme        +textobjects
      +channel         -hangul_input    +netbeans_intg   +timers
      +cindent         +iconv           +num64           +title
      -clientserver    +insert_expand   +packages        -toolbar
      +clipboard       +job             +path_extra      +user_commands
      +cmdline_compl   +jumplist        +perl            +vertsplit
      +cmdline_hist    +keymap          +persistent_undo +virtualedit
      +cmdline_info    +lambda          +postscript      +visual
      +comments        +langmap         +printer         +visualextra
      +conceal         +libcall         +profile         +viminfo
      +cryptv          +linebreak       -python          +vreplace
      +cscope          +lispindent      +python3         +wildignore
      +cursorbind      +listcmds        +quickfix        +wildmenu
      +cursorshape     +localmap        +reltime         +windows
      +dialog_con      +lua             +rightleft       +writebackup
      +diff            +menu            +ruby            -X11
      +digraphs        +mksession       +scrollbind      -xfontset
      -dnd             +modify_fname    +signs           -xim
      -ebcdic          +mouse           +smartindent     -xpm
      +emacs_tags      -mouseshape      +startuptime     -xsmp
      +eval            +mouse_dec       +statusline      -xterm_clipboard
      +ex_extra        -mouse_gpm       -sun_workshop    -xterm_save
      +extra_search    -mouse_jsbterm   +syntax
      +farsi           +mouse_netterm   +tag_binary
      system vimrc file: "$VIM/vimrc"
      user vimrc file: "$HOME/.vimrc"
      2nd user vimrc file: "~/.vim/vimrc"
      user exrc file: "$HOME/.exrc"
      defaults file: "$VIMRUNTIME/defaults.vim"
      fall-back for $VIM: "/usr/local/share/vim"
      Compilation: clang -c -I. -Iproto -DHAVE_CONFIG_H   -DMACOS_X_UNIX  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1
      Linking: clang   -L. -L/usr/local/lib  -L/usr/local/lib -o vim        -lm  -lncurses -liconv -framework Cocoa  -L/usr/local/lib -llua -fstack-protector  -L/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE -lperl  -L/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.5/lib/python3.5/config-3.5m -lpython3.5m -framework CoreFoundation  -lruby.2.0.0 -lobjc
      #+END_SRC

      macOS 下使用 brew 安装 vim 非常方便, 其他平台下可以自行搜索更多内容.

*** 第三方工具

     比如语法检查时用到的各种 linter, python 代码格式化时用到的 yapf。具体这些工具如何安装，在需要时自行安装即可。

*** 字体

     要想界面漂亮，字体可能也是不可或缺, 况且安装也不是很复杂。

     对于 airline layer 中使用的 [[https://github.com/vim-airline/vim-airline][vim-airline]] 最好搭配 [[https://github.com/powerline/fonts][powerline fonts]] 字体， space-vim 默认不使用. 推荐安装:

     #+BEGIN_SRC sh
     git clone https://github.com/powerline/fonts.git ~/.fonts
     sh ~/.fonts/install.sh
     #+END_SRC

     powerline font 安装完成后，在 ~.spacevim~ 中启用字体：

     #+BEGIN_SRC vim
     let g:airline_powerline_fonts=1
     #+END_SRC

**** 字体设置

     GUI 环境下, 可直接在 vim 的配置文件进行设置. 

     终端环境下 vim 的字体服从于 terminal 的字体设置，因此安装完成后, 需要在 terminal 的字体设置中启用带有 for powerline 样式的字体，否则在启用 airline 时可能会出现状态栏乱码. 
     下图为 iterm2 中的字体设置：

     file:../img/iterm2_powerline_setting.png

** 启用 layer

    启用 layer 非常简单，使用一键安装脚本安装[[https://github.com/liuchengxu/space-vim][ space-vim]] 时会自动在当前用户目录下生成一个 ~.spacevim~ ，可在其中的 ~UserInit()~ 部分进行启用已有的 layer, 也可以在里面放置 space-vim 没有的插件：

    *每个 layer 下，通常附有一个 README 以简要说明，请在启用该 layer 时进行查阅* 。

    #+BEGIN_SRC vim
    function! UserInit()

        " Put the layers you want to enable as well as extra private plugins
        Layer 'fzf'
        Layer 'ycmd'
        Layer 'syntax-checking'

        Layer 'emoji'
        Layer 'goyo'

        Layer 'html'
        Layer 'python'
        Layer 'markdown'
        Layer 'c-c++'

        " put extra plugins
        Plug 'extr0py/oni'

    endfunction
    #+END_SRC

    *注意，如果是首次启用一个 layer，需要执行 ~SPC f R~, 或者 ~:so $MYVIMRC~, 或者退出在打开 vim, 重新加载 .vimrc 并执行 ~:PlugInstall~ 安装所需的相关插件* 。

** 个性化

    上面说了可以再 ~UserInit()~ 中放置自己的插件, 此外在 =.spacevim= 中还有个 ~UserConfig()~ ，可以将一些个性化配置放在这里。比如想换个主题：

    #+BEGIN_SRC vim
    function! UserConfig()

        color molokai

    endfunction
    #+END_SRC

    如果个性化配置比较多，也可以放在 private 目录下。private 可看做是一个 layer, 里面可以有 config.vim 与 packages.vim 这两个文件。如果这两个文件存在，space-vim 也会在启动时进行加载。

** 更新

    对于 vim 插件的更新，自然是通过插件管理器 vim-plug 提供的相关命令 ~:PlugUpdate~ 。

    对于 space-vim, 可以进入 "~/.space-vim" 执行 `git pull`。

* 默认安装

   默认启用了 3 个 layer:

    #+BEGIN_SRC vim
    " Default layers
    Layer 'fzf'
    Layer 'unite'
    Layer 'better-defaults'
    #+END_SRC

    一个尽快上手最重要的快捷键: ~SPC ?~ , 使用空格键加问号查看现有的键位绑定, 打开后可使用 ~Ctrl j~, ~Ctrl k~ 进行上下选择, ~Ctrl c~ 退出, 也可直接输入进行模糊查找:

    file:../img/maps.png

    从图中可以看到键位映射，比如挑一个 =<Space>bp=, 后面跟着该快捷键对应的命令 =:bprevious<CR>=, 意为 buffer previous, 即跳转前一个 buffer. 后面还跟着定义该快捷键的文件, 来自 “vim-better-default/plugin/default.vim”。 不熟悉时，可以将快捷键都看一下。（图中可以看出我正在 tmux 中使用 vim, 如果不是，那么执行这个操作的窗口会比较大，不要惊讶。）

    ~SPC ?~ 实际映射的命令是 [[https://github.com/junegunn/fzf.vim][fzf.vim]] 的 ~:Maps~, 因此 fzf layer 实际是为了支持 unite layer. 不过其中安装的 [[https://github.com/junegunn/fzf][fzf]] 除了可在 vim 中，也可在 terminal 中使用。 

    更多内容请直接查看 layer 下的 README, config.vim 与 packages.vim.

** better-defaults

    一些 “人性化” 设置和基本的键位映射，包括 buffer, window, esay-motion 快速移动等操作。了解 better-defaults 下面的键位设置非常重要，因为这些是所有快捷键设定的重要组成部分.

** unite

    unite layer 主要希望提供一个界面来选择一些不太常用或稍复杂的命令.
